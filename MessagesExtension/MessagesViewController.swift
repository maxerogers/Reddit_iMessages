//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Max Rogers on 8/22/16.
//  Copyright Â© 2016 Max Rogers. All rights reserved.
//

import UIKit
import Messages
import SafariServices

class MessagesViewController: MSMessagesAppViewController {
    @IBOutlet var tableView: UITableView!
    
    var posts: [Post]?
    var savedConversation: MSConversation?
    var safariViewController: SFSafariViewController?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        tableView.estimatedRowHeight = 100.0
        tableView.rowHeight = UITableViewAutomaticDimension
        RedditAPI.getTopStories { [weak self] (results) in
            self?.posts = results
            self?.tableView.reloadData()
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        savedConversation = conversation
        safariViewController?.dismiss(animated: true, completion: nil)
        if let url = conversation.selectedMessage?.url {
            safariViewController = SFSafariViewController(url: url)
            present(safariViewController!, animated: true, completion: nil)
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        
        guard presentationStyle == .expanded else { return }
        if let message = activeConversation?.selectedMessage, let url = message.url {
            safariViewController = SFSafariViewController(url: url)
            present(safariViewController!, animated: true)
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

extension MessagesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return posts?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "post") as! PostTableViewCell
        if let post = posts?[indexPath.row] {
            cell.title.text = post.title ?? "No Title"
            if let score = post.score {
                cell.score.text = "score: \(score)"
            }
            cell.domain.text = post.domain ?? "No URL"
        }
        return cell
    }
}

extension MessagesViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let post = posts?[indexPath.row] else { return }
        let message = MSMessage()
        let layout = MSMessageTemplateLayout()
        layout.caption = post.title
        if let score = post.score {
            layout.subcaption = "\(score)"
        }
        layout.trailingSubcaption = post.domain
        if let postUrl = post.url, let url = URL(string: postUrl) {
            message.url = url
        }
        message.layout = layout
        self.activeConversation?.insert(message, completionHandler: nil)
    }
}
